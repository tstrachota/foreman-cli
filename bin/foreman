#!/usr/bin/python
#
# Katello Shell
# Copyright 2013 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.
#

import os
import sys

# Change encoding of output streams when no encoding is forced via $PYTHONIOENCODING
# or setting in lib/python{version}/site-packages
from pertinax.encoding import fix_io_encoding
#fix_io_encoding()

# Set correct locale
from pertinax.i18n import configure_i18n
configure_i18n()

from pertinax.i18n_optparse import OptionParser
from optparse import OptionGroup, SUPPRESS_HELP

# from katello.client import server
# from katello.client.server import BasicAuthentication, SSLAuthentication, NoAuthentication

from okaara.extensions.loader import load_extensions
from okaara.prompt import Prompt

from pertinax.cli import PertinaxCli, ClientContext
from pertinax.config import Config
from pertinax.logutil import getLogger
from pertinax.exceptions import ExceptionHandler

from foreman.apipie import ServerConnection, BasicAuthentication, NoAuthentication
from foreman.bindings import Bindings

def _create_parser(config):
    parser = OptionParser()
    parser.disable_interspersed_args()

    parser.add_option("-v", "--version", action="store_true", default=False,
                            dest="version",  help=_('prints version information'))
    parser.add_option("-d", "--debug", action="store_true", default=False,
                            dest="debug",  help=_('send debug information into logs'))

    credentials = OptionGroup(parser, _('User Account Credentials'))
    credentials.add_option('-u', '--username', dest='username', default=None, help=_('account username'))
    credentials.add_option('-p', '--password', dest='password', default=None, help=_('account password'))
    parser.add_option_group(credentials)

    server_opt = OptionGroup(parser, _('Foreman Server Information'))
    host = config.get('server', 'host') or 'localhost'
    server_opt.add_option('--host', dest='host', default=host, help=_('katello server host name (default: %s)') % host)

    port = config.get('server', 'port') or '443'
    server_opt.add_option('--port', dest='port', default=port, help=SUPPRESS_HELP)

    scheme = config.get('server', 'scheme') or 'https'
    server_opt.add_option('--scheme', dest='scheme', default=scheme, help=SUPPRESS_HELP)

    path = config.get('server', 'path') or '/foreman'
    server_opt.add_option('--path', dest='path', default=path, help=SUPPRESS_HELP)
    parser.add_option_group(server_opt)

    return parser


def _server_locale():
    """
    Take system locale and convert it to server locale
    Eg. en_US -> en-us
    """
    import locale
    loc = locale.getlocale()[0] or locale.getdefaultlocale()[0]
    if loc is not None:
        return loc.lower().replace('_', '-')
    else:
        return loc


def _setup_server(options):
    """
    Setup the active server connection.
    """
    host = options.host
    port = options.port
    scheme = options.scheme
    path = options.path

    conn = ServerConnection(host, int(port), scheme, path, _server_locale())
    return _setup_server_credentials(conn, options)


def _setup_server_credentials(server, options):
    """
    Setup up request credentials with the active server.
    """
    username = options.username
    password = options.password

    if None not in (username, password):
        server.set_auth_method(BasicAuthentication(username, password))
    else:
        server.set_auth_method(NoAuthentication())
    return server


if __name__ == "__main__":

    config = Config().parser
    prompt = Prompt()

    parser = _create_parser(config)
    options, args = parser.parse_args()

    connection = _setup_server(options)

    context = ClientContext(
        config,
        getLogger(__name__),
        prompt,
        ExceptionHandler(prompt, config),
        Bindings(connection)
    )
    cli = PertinaxCli(context)
    context.cli = cli

    load_extensions(
        extensions_dirs=["/root/foreman_cli/"],
        init_mod_name="foreman_cli",
        entry_points=["foreman.extensions.client"],
        context=context
    )

    sys.exit(context.cli.run(args))

